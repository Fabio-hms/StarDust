import re
from typing import List, Tuple, Optional

class Token:
    def __init__(self, tipo: str, valor: str, linha: int, coluna: int):
        self.tipo = tipo
        self.valor = valor
        self.linha = linha
        self.coluna = coluna
    
    def __repr__(self):
        return f"Token({self.tipo}, '{self.valor}', linha={self.linha}, coluna={self.coluna})"

class AFD:
    def __init__(self, nome: str, padrao: str, flags=0):
        self.nome = nome
        self.regex = re.compile(padrao, flags)

    def reconhecer(self, texto: str) -> Optional[Tuple[str, str]]:
        match = self.regex.match(texto)
        if match:
            return (self.nome, match.group())
        return None

afd_identificador = AFD("IDENTIFICADOR", r"[a-z_][a-zA-Z0-9_]*")
afd_inteiro       = AFD("NUM_INTEIRO", r"[+-]?\d+")
afd_decimal       = AFD("NUM_DECIMAL", r"[+-]?(?:\d+\.\d*|\.\d+)(?:[eE][+-]?\d+)?")
afd_string_simples= AFD("STRING", r"'([^'\\]|\\.)*'")
afd_string_duplas = AFD("STRING", r'"([^"\\]|\\.)*"')

afd_igualdade     = AFD("OP_IGUAL", r"==")
afd_diferente     = AFD("OP_DIF", r"!=")
afd_maiorigual    = AFD("OP_GE", r">=")
afd_menorigual    = AFD("OP_LE", r"<=")
afd_maior         = AFD("OP_GT", r">")
afd_menor         = AFD("OP_LT", r"<")
afd_atribuicao    = AFD("OP_ATR", r"=")
afd_divint        = AFD("OP_DIVINT", r"//")
afd_soma          = AFD("OP_ADD", r"\+")
afd_sub           = AFD("OP_SUB", r"-")
afd_mul           = AFD("OP_MUL", r"\*")
afd_div           = AFD("OP_DIV", r"/")
afd_mod           = AFD("OP_MOD", r"%")

afd_par_esq       = AFD("DEL_PAR_ESQ", r"\(")
afd_par_dir       = AFD("DEL_PAR_DIR", r"\)")
afd_chave_esq     = AFD("DEL_CH_ESQ", r"\{")
afd_chave_dir     = AFD("DEL_CH_DIR", r"\}")
afd_ponto_virg    = AFD("DEL_PV", r";")

afd_coment_linha  = AFD("COMENT_LINHA", r"//.*")
afd_coment_bloco  = AFD("COMENT_BLOCO", r"/\*.*?\*/", re.DOTALL)

afd_keywords = [AFD("KW_IF", r"\bif\b"),
                AFD("KW_ELSE", r"\belse\b"),
                AFD("KW_FOR", r"\bfor\b"),
                AFD("KW_WHILE", r"\bwhile\b"),
                AFD("KW_DEF", r"\bdef\b"),
                AFD("KW_RETURN", r"\breturn\b"),
                AFD("KW_TRUE", r"\btrue\b"),
                AFD("KW_FALSE", r"\bfalse\b"),
                AFD("KW_NULL", r"\bnull\b"),
                AFD("KW_AND", r"\band\b"),
                AFD("KW_OR", r"\bor\b"),
                AFD("KW_FUNCTION", r"\bfunction\b")]

lista_afds = [
    afd_coment_bloco,
    afd_coment_linha,
    afd_keywords[0], afd_keywords[1], afd_keywords[2], afd_keywords[3], afd_keywords[4], afd_keywords[5],
    afd_keywords[6], afd_keywords[7], afd_keywords[8], afd_keywords[9], afd_keywords[10], afd_keywords[11],
    afd_igualdade, afd_diferente, afd_maiorigual, afd_menorigual,
    afd_divint,  
    afd_maior, afd_menor, afd_atribuicao,
    afd_soma, afd_sub, afd_mul, afd_div, afd_mod,
    afd_par_esq, afd_par_dir, afd_chave_esq, afd_chave_dir, afd_ponto_virg,
    afd_decimal,
    afd_inteiro,
    afd_string_simples,
    afd_string_duplas,
    afd_identificador
]

def analisar_lexico(texto: str) -> List[Token]:
    tokens = []
    linha = 1
    coluna = 1
    pos = 0
    tamanho = len(texto)

    while pos < tamanho:
        trecho = texto[pos:]

        if trecho[0].isspace():
            if trecho[0] == '\n':
                linha += 1
                coluna = 1
            else:
                coluna += 1
            pos += 1
            continue

        token_encontrado = False
        for afd in lista_afds:
            resultado = afd.reconhecer(trecho)
            if resultado:
                nome, valor = resultado

                if nome in ("COMENT_LINHA", "COMENT_BLOCO"):
                    linhas_coment = valor.count('\n')
                    if linhas_coment > 0:
                        linha += linhas_coment
                        coluna = len(valor.split('\n')[-1]) + 1
                    else:
                        coluna += len(valor)
                    pos += len(valor)
                    token_encontrado = True
                    break

                if nome == "IDENTIFICADOR":
                    for kw in afd_keywords:
                        if kw.regex.fullmatch(valor):
                            nome = kw.nome
                            break

                tokens.append(Token(nome, valor, linha, coluna))
                avanço = len(valor)
                pos += avanço

                linhas_token = valor.count('\n')
                if linhas_token > 0:
                    linha += linhas_token
                    coluna = len(valor.split('\n')[-1]) + 1
                else:
                    coluna += avanço

                token_encontrado = True
                break

        if not token_encontrado:
            raise SyntaxError(f"Caractere inesperado '{trecho[0]}' na linha {linha} coluna {coluna}")
    
    return tokens


